package com.example.android.hilt.di

import android.content.Context
import androidx.room.Room
import com.example.android.hilt.data.AppDatabase
import com.example.android.hilt.data.LogDao
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.components.ApplicationComponent
import dagger.hilt.android.qualifiers.ApplicationContext
import javax.inject.Singleton


@InstallIn(ApplicationComponent::class)
@Module
//Since LoggerLocalDataSource is scoped to the application container, the LogDao binding needs to be available in the application container.
// We specify that requirement using the @InstallIn annotation by passing in the class of the Hilt Component associated with it (i.e. ApplicationComponent:class):
object DatabaseModule {
    @Provides
    @Singleton
    //@Provides in Hilt modules to tell Hilt how to provide types that cannot be constructor injected.
    fun provideDatabase(@ApplicationContext appContext: Context): AppDatabase {
        //Since AppDatabase is another class that our project doesn't own because it's generated by Room,
        //we can also provide it using an @Provides function similar to how we build the database instance in the ServiceLocator class:
       //Since we always want Hilt to provide the same database instance, we annotate the @Provides provideDatabase method with @Singleton
        return Room.databaseBuilder(
            appContext,
            AppDatabase::class.java,
            "logging.db"
        ).build()
    }

    @Provides
    fun provideLogDao(database: AppDatabase): LogDao {
        return database.logDao()
    }
}